loading graph
n: 11
starting lipton tarjan...
g

**********************  Graph  **************************
vert 0   hos edges 1 3 4 
vert 1   hos edges 0 2 
vert 2   hos edges 1 3 
vert 3   hos edges 2 0 6 
vert 4   hos edges 5 0 7 
vert 5   hos edges 4 6 
vert 6   hos edges 5 3 7 
vert 7   hos edges 6 4 8 
vert 8   hos edges 7 9 10 
vert 9   hos edges 8 10 
vert 10   hos edges 9 8 
*********************************************************

g_copy

**********************  Graph  **************************
vert 0   hos edges 0 0 0 
vert 0   hos edges 0 0 
vert 0   hos edges 0 0 
vert 0   hos edges 0 0 0 
vert 0   hos edges 0 0 0 
vert 0   hos edges 0 0 
vert 0   hos edges 0 0 0 
vert 0   hos edges 0 0 0 
vert 0   hos edges 0 0 0 
vert 0   hos edges 0 0 
vert 0   hos edges 0 0 
*********************************************************

---------------------------- 1 - Check Planarity  ------------
planar ok

**********************  Graph  **************************
vert 0   hos edges 1 3 4 
vert 1   hos edges 0 2 
vert 2   hos edges 1 3 
vert 3   hos edges 2 0 6 
vert 4   hos edges 5 0 7 
vert 5   hos edges 4 6 
vert 6   hos edges 5 3 7 
vert 7   hos edges 6 4 8 
vert 8   hos edges 7 9 10 
vert 9   hos edges 8 10 
vert 10   hos edges 9 8 
*********************************************************

---------------------------- 2 - Connected Components --------
# of components: 1
too big
biggest component: 0
---------------------------- 3 - BFS and Levels ------------
  tree edge 0, 1
  tree edge 0, 3
  tree edge 0, 4
  tree edge 1, 2
  tree edge 3, 6
  tree edge 4, 5
  tree edge 4, 7
  tree edge 7, 8
  tree edge 8, 9
  tree edge 8, 10
level/cost of vert 0: 0
level/cost of vert 1: 1
level/cost of vert 2: 2
level/cost of vert 3: 1
level/cost of vert 4: 1
level/cost of vert 5: 2
level/cost of vert 6: 2
level/cost of vert 7: 2
level/cost of vert 8: 3
level/cost of vert 9: 4
level/cost of vert 10: 4
L[0]: 1
L[1]: 3
L[2]: 4
L[3]: 1
L[4]: 2
L[5]: 0
---------------------------- 4 - l1 and k  ------------
k:  8      # of verts in levels 0 thru l1
l1: 2      total cost of levels 0 thru l1 barely exceeds 1/2
---------------------------- 5 - Find More Levels -------
sq:    5.65685
snk:   3.4641
l0: 2     highest level <= l1
l2: 3     lowest  level >= l1 + 1
---------------------------- 6 - Shrinktree -------------
n: 11
going to replace vertex 0 of level l0 0 <= 2
going to replace vertex 1 of level l0 1 <= 2
going to replace vertex 2 of level l0 2 <= 2
going to replace vertex 3 of level l0 1 <= 2
going to replace vertex 4 of level l0 1 <= 2
going to replace vertex 5 of level l0 2 <= 2
going to replace vertex 6 of level l0 2 <= 2
going to replace vertex 7 of level l0 2 <= 2
deleting vertex 8 of level l2 3 >= 3
killing vertex 8
deleting vertex 9 of level l2 4 >= 3
killing vertex 9
deleting vertex 10 of level l2 4 >= 3
killing vertex 10
vertex 0 at level 0 is TRUE
vertex 1 at level 1 is TRUE
vertex 2 at level 2 is TRUE
vertex 3 at level 1 is TRUE
vertex 4 at level 1 is TRUE
vertex 5 at level 2 is TRUE
vertex 6 at level 2 is TRUE
vertex 7 at level 2 is TRUE
vertex 999999 at level 4 is FALSE
foundedge 2, 3     going to delete 2, 3
foundedge 3, 2     going to delete 3, 2
foundedge 6, 5     going to delete 6, 5
foundedge 6, 7     going to delete 6, 7
foundedge 5, 6     going to delete 5, 6
foundedge 7, 6     going to delete 7, 6
finishing
edges to add size: 0
adding: 
edges to remove size: 6
removing: (2, 3)   (3, 2)   (5, 6)   (6, 5)   (6, 7)   (7, 6)   
no edges to x found, deleting
killing vertex 999999
x_gone: 0
-------------------- 7 - New BFS and Make Max Planar -----
root: 0
n:    8
  tree edge 0, 1
  tree edge 0, 3
  tree edge 0, 4
  tree edge 1, 2
  tree edge 3, 6
  tree edge 4, 5
  tree edge 4, 7

**********************  Graph  **************************
vert 0   hos edges 1 3 4 2 6 5 7 
vert 1   hos edges 0 2 3 4 5 
vert 2   hos edges 1 0 3 
vert 3   hos edges 0 6 4 1 2 
vert 4   hos edges 5 0 7 3 1 6 
vert 5   hos edges 4 7 0 1 
vert 6   hos edges 3 0 4 
vert 7   hos edges 4 5 0 
*********************************************************

----------------------- 8 - Locate Cycle -----------------
arbitrarily choosing nontree edge: 0, 2
ancestors v1...
ancestors v2...
common ancestor: 0
total inside cost:  5
total outside cost: 0
---------------------------- 9 - Improve Separator -----------

**********************  Edges  **************************
0, 1
1, 2
3, 0
4, 5
6, 3
0, 4
4, 7
0, 2
0, 6
5, 7
0, 5
3, 4
1, 3
1, 4
1, 5
2, 3
6, 4
7, 0
*********************************************************

found cycle with inside cost < 2/3: 5
cycle verts: 0 1 2 

------------ 10  - Construct Vertex Partition --------------

**********************  Graph  **************************
vert 0   hos edges 0 0 0 
vert 0   hos edges 0 0 
vert 0   hos edges 0 0 
vert 0   hos edges 0 0 0 
vert 0   hos edges 0 0 0 
vert 0   hos edges 0 0 
vert 0   hos edges 0 0 0 
vert 0   hos edges 0 0 0 
vert 0   hos edges 0 0 0 
vert 0   hos edges 0 0 
vert 0   hos edges 0 0 
*********************************************************

l0: 2
l1: 2
l2: 3
r: 3
level of 0: 0, 0 belongs to first part
level of 0: 0, 0 belongs to first part
level of 0: 0, 0 belongs to first part
level of 0: 0, 0 belongs to first part
level of 0: 0, 0 belongs to first part
level of 0: 0, 0 belongs to first part
level of 0: 0, 0 belongs to first part
level of 0: 0, 0 belongs to first part
level of 0: 0, 0 belongs to first part
level of 0: 0, 0 belongs to first part
level of 0: 0, 0 belongs to first part
